# L'avantage (sélection) de l'espèce B dans parcelle y
sBy <- 0.05
# dispersion
m <- 0.02
# Le nombre "d'années" pour les simulations
num_years <- 50
# Une matrice vide pour les données de la simulation
# On va faire un suivi de la proportion de l'espèce A dans chaque parcelle
prop_A <- matrix(0,nrow=(Jx+Jy)*num_years,ncol=2)
prop_A[1,1] <- sum(COMx==1)/Jx
prop_A[1,2] <- sum(COMy==1)/Jy
prob_Ax <- (1+sAx)*prop_A[1,1]
prob_By <- (1+sBy)*(1 - prop_A[1,2])
# Partir le modèle
for (i in 2:((Jx+Jy)*num_years)) {
# Choisir au hasard un individu qui va mourir (voir Devoir_1a.R)
# avec probabilité m, remplacer l'individu mort avec un descendant d'un individu dans l'autre parcelle
# avec probabilité (1-m), remplacer l'individu mort avec un descendant d'un individu de la même parcelle
# pour les remplacements locales, les 2 espèces n'ont pas les mêmes probabilités d'être le "replaceur" selon les paramètres sAx et sBy
# si l'individu mort est dans parcelle x
if (runif(1) > Jx/(Jx+Jy)) {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jx*runif(1))
# dispersion
if (runif(1) < m) {
COMx[death_cell] <- COMy[ceiling(Jy*runif(1))]
}
# replacement locale
else {
prob_Ax <- (1+sAx)*prop_A[i-1,1]
if (runif(1) < prob_Ax) COMx[death_cell] <- 1 else COMx[death_cell] <- 2
}
# si l'individu mort est dans parcelle y
} else {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jy*runif(1))
# dispersion
if (runif(1) < m) {
COMy[death_cell] <- COMx[ceiling(Jx*runif(1))]
}
# replacement locale
else {
prob_By <- (1+sBy)*(1 - prop_A[i-1,2])
if (runif(1) < prob_By) COMy[death_cell] <- 2 else COMy[death_cell] <- 1
}
}
# Calculer les nouvelle proportions de l'espèce A dans les deux communautés
prop_A[i,1] <- sum(COMx==1)/Jx
prop_A[i,2] <- sum(COMy==1)/Jy
}
# Créer une graphique
plot((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,1], col="red", ylim=c(0,1), type="l", xlab="Time", ylab="Freq(A)")
lines((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,2], type="l", title("Rouge est parcelle x"))
# "Imprimer" les proportions finales de l'espèce A
prop_A[(Jx+Jy)*num_years,]
# MODÈLE AVEC SÉLECTION, DÉRIVE ET DISPERSION (deux communautés)
# Établir les communautés (COMx, COMy) initiale (avec Jx et Jy individus)
Jx <- 80 # il faut que Jx soit pair
Jy <- 80 # il faut que Jy soit pair
COMx <- vector(length=Jx)
COMx[1:Jx/2] <- 1
COMx[(Jx/2+1):Jx] <- 2
COMy <- vector(length=Jy)
COMy[1:Jy/2] <- 1
COMy[(Jy/2+1):Jy] <- 2
# L'avantage (sélection) de l'espèce A dans parcelle x
sAx <- 0.1
# L'avantage (sélection) de l'espèce B dans parcelle y
sBy <- 0.1
# dispersion
m <- 0.05
# Le nombre "d'années" pour les simulations
num_years <- 50
# Une matrice vide pour les données de la simulation
# On va faire un suivi de la proportion de l'espèce A dans chaque parcelle
prop_A <- matrix(0,nrow=(Jx+Jy)*num_years,ncol=2)
prop_A[1,1] <- sum(COMx==1)/Jx
prop_A[1,2] <- sum(COMy==1)/Jy
prob_Ax <- (1+sAx)*prop_A[1,1]
prob_By <- (1+sBy)*(1 - prop_A[1,2])
# Partir le modèle
for (i in 2:((Jx+Jy)*num_years)) {
# Choisir au hasard un individu qui va mourir (voir Devoir_1a.R)
# avec probabilité m, remplacer l'individu mort avec un descendant d'un individu dans l'autre parcelle
# avec probabilité (1-m), remplacer l'individu mort avec un descendant d'un individu de la même parcelle
# pour les remplacements locales, les 2 espèces n'ont pas les mêmes probabilités d'être le "replaceur" selon les paramètres sAx et sBy
# si l'individu mort est dans parcelle x
if (runif(1) > Jx/(Jx+Jy)) {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jx*runif(1))
# dispersion
if (runif(1) < m) {
COMx[death_cell] <- COMy[ceiling(Jy*runif(1))]
}
# replacement locale
else {
prob_Ax <- (1+sAx)*prop_A[i-1,1]
if (runif(1) < prob_Ax) COMx[death_cell] <- 1 else COMx[death_cell] <- 2
}
# si l'individu mort est dans parcelle y
} else {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jy*runif(1))
# dispersion
if (runif(1) < m) {
COMy[death_cell] <- COMx[ceiling(Jx*runif(1))]
}
# replacement locale
else {
prob_By <- (1+sBy)*(1 - prop_A[i-1,2])
if (runif(1) < prob_By) COMy[death_cell] <- 2 else COMy[death_cell] <- 1
}
}
# Calculer les nouvelle proportions de l'espèce A dans les deux communautés
prop_A[i,1] <- sum(COMx==1)/Jx
prop_A[i,2] <- sum(COMy==1)/Jy
}
# Créer une graphique
plot((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,1], col="red", ylim=c(0,1), type="l", xlab="Time", ylab="Freq(A)")
lines((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,2], type="l", title("Rouge est parcelle x"))
# "Imprimer" les proportions finales de l'espèce A
prop_A[(Jx+Jy)*num_years,]
# MODÈLE AVEC SÉLECTION, DÉRIVE ET DISPERSION (deux communautés)
# Établir les communautés (COMx, COMy) initiale (avec Jx et Jy individus)
Jx <- 80 # il faut que Jx soit pair
Jy <- 80 # il faut que Jy soit pair
COMx <- vector(length=Jx)
COMx[1:Jx/2] <- 1
COMx[(Jx/2+1):Jx] <- 2
COMy <- vector(length=Jy)
COMy[1:Jy/2] <- 1
COMy[(Jy/2+1):Jy] <- 2
# L'avantage (sélection) de l'espèce A dans parcelle x
sAx <- 0.1
# L'avantage (sélection) de l'espèce B dans parcelle y
sBy <- 0.1
# dispersion
m <- 0.05
# Le nombre "d'années" pour les simulations
num_years <- 50
# Une matrice vide pour les données de la simulation
# On va faire un suivi de la proportion de l'espèce A dans chaque parcelle
prop_A <- matrix(0,nrow=(Jx+Jy)*num_years,ncol=2)
prop_A[1,1] <- sum(COMx==1)/Jx
prop_A[1,2] <- sum(COMy==1)/Jy
prob_Ax <- (1+sAx)*prop_A[1,1]
prob_By <- (1+sBy)*(1 - prop_A[1,2])
# Partir le modèle
for (i in 2:((Jx+Jy)*num_years)) {
# Choisir au hasard un individu qui va mourir (voir Devoir_1a.R)
# avec probabilité m, remplacer l'individu mort avec un descendant d'un individu dans l'autre parcelle
# avec probabilité (1-m), remplacer l'individu mort avec un descendant d'un individu de la même parcelle
# pour les remplacements locales, les 2 espèces n'ont pas les mêmes probabilités d'être le "replaceur" selon les paramètres sAx et sBy
# si l'individu mort est dans parcelle x
if (runif(1) > Jx/(Jx+Jy)) {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jx*runif(1))
# dispersion
if (runif(1) < m) {
COMx[death_cell] <- COMy[ceiling(Jy*runif(1))]
}
# replacement locale
else {
prob_Ax <- (1+sAx)*prop_A[i-1,1]
if (runif(1) < prob_Ax) COMx[death_cell] <- 1 else COMx[death_cell] <- 2
}
# si l'individu mort est dans parcelle y
} else {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jy*runif(1))
# dispersion
if (runif(1) < m) {
COMy[death_cell] <- COMx[ceiling(Jx*runif(1))]
}
# replacement locale
else {
prob_By <- (1+sBy)*(1 - prop_A[i-1,2])
if (runif(1) < prob_By) COMy[death_cell] <- 2 else COMy[death_cell] <- 1
}
}
# Calculer les nouvelle proportions de l'espèce A dans les deux communautés
prop_A[i,1] <- sum(COMx==1)/Jx
prop_A[i,2] <- sum(COMy==1)/Jy
}
# Créer une graphique
plot((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,1], col="red", ylim=c(0,1), type="l", xlab="Time", ylab="Freq(A)")
lines((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,2], type="l", title("Rouge est parcelle x"))
# "Imprimer" les proportions finales de l'espèce A
prop_A[(Jx+Jy)*num_years,]
# MODÈLE AVEC SÉLECTION, DÉRIVE ET DISPERSION (deux communautés)
# Établir les communautés (COMx, COMy) initiale (avec Jx et Jy individus)
Jx <- 80 # il faut que Jx soit pair
Jy <- 80 # il faut que Jy soit pair
COMx <- vector(length=Jx)
COMx[1:Jx/2] <- 1
COMx[(Jx/2+1):Jx] <- 2
COMy <- vector(length=Jy)
COMy[1:Jy/2] <- 1
COMy[(Jy/2+1):Jy] <- 2
# L'avantage (sélection) de l'espèce A dans parcelle x
sAx <- 0.1
# L'avantage (sélection) de l'espèce B dans parcelle y
sBy <- 0.1
# dispersion
m <- 0.05
# Le nombre "d'années" pour les simulations
num_years <- 50
# Une matrice vide pour les données de la simulation
# On va faire un suivi de la proportion de l'espèce A dans chaque parcelle
prop_A <- matrix(0,nrow=(Jx+Jy)*num_years,ncol=2)
prop_A[1,1] <- sum(COMx==1)/Jx
prop_A[1,2] <- sum(COMy==1)/Jy
prob_Ax <- (1+sAx)*prop_A[1,1]
prob_By <- (1+sBy)*(1 - prop_A[1,2])
# Partir le modèle
for (i in 2:((Jx+Jy)*num_years)) {
# Choisir au hasard un individu qui va mourir (voir Devoir_1a.R)
# avec probabilité m, remplacer l'individu mort avec un descendant d'un individu dans l'autre parcelle
# avec probabilité (1-m), remplacer l'individu mort avec un descendant d'un individu de la même parcelle
# pour les remplacements locales, les 2 espèces n'ont pas les mêmes probabilités d'être le "replaceur" selon les paramètres sAx et sBy
# si l'individu mort est dans parcelle x
if (runif(1) > Jx/(Jx+Jy)) {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jx*runif(1))
# dispersion
if (runif(1) < m) {
COMx[death_cell] <- COMy[ceiling(Jy*runif(1))]
}
# replacement locale
else {
prob_Ax <- (1+sAx)*prop_A[i-1,1]
if (runif(1) < prob_Ax) COMx[death_cell] <- 1 else COMx[death_cell] <- 2
}
# si l'individu mort est dans parcelle y
} else {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jy*runif(1))
# dispersion
if (runif(1) < m) {
COMy[death_cell] <- COMx[ceiling(Jx*runif(1))]
}
# replacement locale
else {
prob_By <- (1+sBy)*(1 - prop_A[i-1,2])
if (runif(1) < prob_By) COMy[death_cell] <- 2 else COMy[death_cell] <- 1
}
}
# Calculer les nouvelle proportions de l'espèce A dans les deux communautés
prop_A[i,1] <- sum(COMx==1)/Jx
prop_A[i,2] <- sum(COMy==1)/Jy
}
# Créer une graphique
plot((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,1], col="red", ylim=c(0,1), type="l", xlab="Time", ylab="Freq(A)")
lines((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,2], type="l", title("Rouge est parcelle x"))
# "Imprimer" les proportions finales de l'espèce A
prop_A[(Jx+Jy)*num_years,]
# MODÈLE AVEC SÉLECTION, DÉRIVE ET DISPERSION (deux communautés)
# Établir les communautés (COMx, COMy) initiale (avec Jx et Jy individus)
Jx <- 80 # il faut que Jx soit pair
Jy <- 80 # il faut que Jy soit pair
COMx <- vector(length=Jx)
COMx[1:Jx/2] <- 1
COMx[(Jx/2+1):Jx] <- 2
COMy <- vector(length=Jy)
COMy[1:Jy/2] <- 1
COMy[(Jy/2+1):Jy] <- 2
# L'avantage (sélection) de l'espèce A dans parcelle x
sAx <- 0.1
# L'avantage (sélection) de l'espèce B dans parcelle y
sBy <- 0.1
# dispersion
m <- 0.05
# Le nombre "d'années" pour les simulations
num_years <- 50
# Une matrice vide pour les données de la simulation
# On va faire un suivi de la proportion de l'espèce A dans chaque parcelle
prop_A <- matrix(0,nrow=(Jx+Jy)*num_years,ncol=2)
prop_A[1,1] <- sum(COMx==1)/Jx
prop_A[1,2] <- sum(COMy==1)/Jy
prob_Ax <- (1+sAx)*prop_A[1,1]
prob_By <- (1+sBy)*(1 - prop_A[1,2])
# Partir le modèle
for (i in 2:((Jx+Jy)*num_years)) {
# Choisir au hasard un individu qui va mourir (voir Devoir_1a.R)
# avec probabilité m, remplacer l'individu mort avec un descendant d'un individu dans l'autre parcelle
# avec probabilité (1-m), remplacer l'individu mort avec un descendant d'un individu de la même parcelle
# pour les remplacements locales, les 2 espèces n'ont pas les mêmes probabilités d'être le "replaceur" selon les paramètres sAx et sBy
# si l'individu mort est dans parcelle x
if (runif(1) > Jx/(Jx+Jy)) {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jx*runif(1))
# dispersion
if (runif(1) < m) {
COMx[death_cell] <- COMy[ceiling(Jy*runif(1))]
}
# replacement locale
else {
prob_Ax <- (1+sAx)*prop_A[i-1,1]
if (runif(1) < prob_Ax) COMx[death_cell] <- 1 else COMx[death_cell] <- 2
}
# si l'individu mort est dans parcelle y
} else {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jy*runif(1))
# dispersion
if (runif(1) < m) {
COMy[death_cell] <- COMx[ceiling(Jx*runif(1))]
}
# replacement locale
else {
prob_By <- (1+sBy)*(1 - prop_A[i-1,2])
if (runif(1) < prob_By) COMy[death_cell] <- 2 else COMy[death_cell] <- 1
}
}
# Calculer les nouvelle proportions de l'espèce A dans les deux communautés
prop_A[i,1] <- sum(COMx==1)/Jx
prop_A[i,2] <- sum(COMy==1)/Jy
}
# Créer une graphique
plot((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,1], col="red", ylim=c(0,1), type="l", xlab="Time", ylab="Freq(A)")
lines((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,2], type="l", title("Rouge est parcelle x"))
# "Imprimer" les proportions finales de l'espèce A
prop_A[(Jx+Jy)*num_years,]
# MODÈLE AVEC SÉLECTION, DÉRIVE ET DISPERSION (deux communautés)
# Établir les communautés (COMx, COMy) initiale (avec Jx et Jy individus)
Jx <- 80 # il faut que Jx soit pair
Jy <- 80 # il faut que Jy soit pair
COMx <- vector(length=Jx)
COMx[1:Jx/2] <- 1
COMx[(Jx/2+1):Jx] <- 2
COMy <- vector(length=Jy)
COMy[1:Jy/2] <- 1
COMy[(Jy/2+1):Jy] <- 2
# L'avantage (sélection) de l'espèce A dans parcelle x
sAx <- 0.1
# L'avantage (sélection) de l'espèce B dans parcelle y
sBy <- 0.1
# dispersion
m <- 0.05
# Le nombre "d'années" pour les simulations
num_years <- 50
# Une matrice vide pour les données de la simulation
# On va faire un suivi de la proportion de l'espèce A dans chaque parcelle
prop_A <- matrix(0,nrow=(Jx+Jy)*num_years,ncol=2)
prop_A[1,1] <- sum(COMx==1)/Jx
prop_A[1,2] <- sum(COMy==1)/Jy
prob_Ax <- (1+sAx)*prop_A[1,1]
prob_By <- (1+sBy)*(1 - prop_A[1,2])
# Partir le modèle
for (i in 2:((Jx+Jy)*num_years)) {
# Choisir au hasard un individu qui va mourir (voir Devoir_1a.R)
# avec probabilité m, remplacer l'individu mort avec un descendant d'un individu dans l'autre parcelle
# avec probabilité (1-m), remplacer l'individu mort avec un descendant d'un individu de la même parcelle
# pour les remplacements locales, les 2 espèces n'ont pas les mêmes probabilités d'être le "replaceur" selon les paramètres sAx et sBy
# si l'individu mort est dans parcelle x
if (runif(1) > Jx/(Jx+Jy)) {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jx*runif(1))
# dispersion
if (runif(1) < m) {
COMx[death_cell] <- COMy[ceiling(Jy*runif(1))]
}
# replacement locale
else {
prob_Ax <- (1+sAx)*prop_A[i-1,1]
if (runif(1) < prob_Ax) COMx[death_cell] <- 1 else COMx[death_cell] <- 2
}
# si l'individu mort est dans parcelle y
} else {
# Choisir au hasard un individu qui va mourir
death_cell <- ceiling(Jy*runif(1))
# dispersion
if (runif(1) < m) {
COMy[death_cell] <- COMx[ceiling(Jx*runif(1))]
}
# replacement locale
else {
prob_By <- (1+sBy)*(1 - prop_A[i-1,2])
if (runif(1) < prob_By) COMy[death_cell] <- 2 else COMy[death_cell] <- 1
}
}
# Calculer les nouvelle proportions de l'espèce A dans les deux communautés
prop_A[i,1] <- sum(COMx==1)/Jx
prop_A[i,2] <- sum(COMy==1)/Jy
}
# Créer une graphique
plot((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,1], col="red", ylim=c(0,1), type="l", xlab="Time", ylab="Freq(A)")
lines((1:((Jx+Jy)*num_years))/(Jx+Jy),prop_A[,2], type="l", title("Rouge est parcelle x"))
# "Imprimer" les proportions finales de l'espèce A
prop_A[(Jx+Jy)*num_years,]
vec1 <- c(1,2,3)
print(vec1)
vec1[3]
vec1[c(1,3)]
vec3 <- c(1,2,3,4,5,6)
mat1 <- matrix(vec3, nrow = 2, ncol =  3)
mat1
mat2 <- matrix(vec3, nrow = 2, ncol =  3, byrow = TRUE)
mat2
mat2[2,3]
mat2[1,]
mean1 <- mean(vec1)
mean1
??'median'
#Écrire une séquence d'entier
seq1 <- -5:5
seq1
install.packages(
c("RSQLite", "Rmarkdown", "targets", "tarchetypes", "rticles", "sf", "terra", "leaflet")
)
setwd("~/BIO500/series_temporelles/series_temporelles")
library(tidyr)
library(dplyr)
#Aller chercher les autres script
source('Eval1')
#Aller chercher les autres script
source('Eval1.R')
source('Eval2.R')
source('Eval2.R')
source('Eval3.R')
source('Eval4.R')
# Fonction pour convertir une chaîne de caractères en format numérique
convertion_array_list <- function(x) {
x <- gsub("\\[|\\]", "", x)  # Supprimer les crochets
as.numeric(unlist(strsplit(x, ",")))  # Diviser et convertir en numérique
}
# Fonction pour s'assurer qu'il n'y a pas de valeurs négatives
justePositif <- function(df) {
# Appliquer la correction sur toutes les colonnes numériques
df[] <- lapply(df, function(col) {
if (is.numeric(col)) {
col[is.na(col)] <- NA
col[col < 0] <- col[col < 0] * -1  # Remplacer les valeurs négatives par leur valeur absolue
}
return(col)
})
return(df)
}
# Fonction pour remplacer NULL par NA
NoNull <- function(df) {
df[] <- lapply(df, function(col) {
# Remplacer NULL par NA dans chaque colonne
col[sapply(col, is.null)] <- NA
return(col)
})
return(df)
}
# Fonction pour séparer les coordonnées "MULTIPOINT" en latitude et longitude
separer_coords <- function(coords) {
# Enlever "MULTIPOINT" et les parenthèses
coords_clean <- gsub("MULTIPOINT\\(|\\)", "", coords)
# Supprimer les espaces multiples et autres caractères indésirables
coords_clean <- gsub("\\s+", " ", coords_clean)
# Enlever toutes les parenthèses restantes
coords_clean <- gsub("\\(", "", coords_clean)
coords_clean <- gsub("\\)", "", coords_clean)
# Diviser la chaîne par l'espace pour séparer longitude et latitude
split_coords <- strsplit(coords_clean, " ")[[1]]
# Vérifier qu'on a bien deux éléments dans le vecteur
if (length(split_coords) == 2) {
# Extraire longitude et latitude et convertir en numérique
longitude <- as.numeric(split_coords[1])
latitude <- as.numeric(split_coords[2])
# Si la conversion échoue, retourner NA
if (is.na(longitude) | is.na(latitude)) {
return(c(NA, NA))
}
# Retourner les valeurs de longitude et latitude
return(c(longitude, latitude))
} else {
# Si le format de la chaîne est incorrect, retourner NA
return(c(NA, NA))
}
}
#Aller chercher les autres script
source('Eval1.R')
source('Eval2.R')
source('Eval3.R')
source('Eval4.R')
file_list <- list.files(path = "chemin/vers/dossier", pattern = "*.csv", full.names = TRUE)
data_nettoyée <- list()
#Aller chercher tous les cs
file_list <- list.files(path = "~/BIO500/series_temporelles/series_temporelles", pattern = "*.csv", full.names = TRUE)
data_nettoyée <- list()
# Boucle pour traiter tous les fichiers CSV
for (file in file_list) {
# Lire le fichier CSV
df <- read.csv(file, stringsAsFactors = FALSE)
# Appliquer la conversion des chaînes en numérique
if ("values" %in% names(df)) {
df$values <- lapply(df$values, convertion_array_list)
}
# Appliquer la fonction pour s'assurer qu'il n'y a pas de valeurs négatives
df <- justePositif(df)
# Remplacer les NULL par NA
df <- NoNull(df)
# Appliquer la fonction de séparation des coordonnées si la colonne existe
if ("coordinates" %in% names(df)) {
coords_list <- lapply(df$coordinates, separer_coords)
df$longitude <- sapply(coords_list, function(x) x[1])
df$latitude <- sapply(coords_list, function(x) x[2])
df$coordinates <- NULL  # Supprimer la colonne d'origine
}
# Unnest les colonnes 'values' et 'years' si elles existent
if ("values" %in% names(df) && "years" %in% names(df)) {
df <- df %>%
unnest(cols = c(values, years))
}
# Ajouter le dataframe nettoyé à la liste
data_nettoyée[[basename(file)]] <- df
}
str(data_nettoyée[[1]])
